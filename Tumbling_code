AltSetpoint = 40
minAlt=18

globalPosSetpoint = {}

Kp = 2 -- Proportional PID coefficient
Kd = 60 -- Derivative PID coefficient
Ki = 0 -- Integral PID coefficient

gFA = {} -- global forwards array

switch = 0              -- This is used for setting the position of the craft at the current location
largestDf = 0           --this is used so that the thrusters always fire at max where possible
D = 0                   -- Saving the old process variable for the derivative calculation
In = 0                  -- Saving the accumilated error for the integral calculation
oldThrusterCount = 0    -- this is to prevent the code from crushing when thrusters are added or removed

function ArrayI(I,c)    --Initialises the multidimensional array
columns = 3
rows = c

  for i = 0,rows do
    gFA[i] = {}
    for j = 1,columns do
      gFA[i][j] = 0
    end
  end
end

function SortT(I,c)--Sorts the thrusters

  for i = 0,c-1 do
    inf = I:Component_GetBlockInfo(9,i) -- block info object
    gF  = inf.Forwards                  -- global forwards vector of the thruster

    gFA[i][1] = gF.x
    gFA[i][2] = gF.y
    gFA[i][3] = gF.z
    
  end
end

function Drive(I,c)--setting the thruster drive/power fraction

enemies = I:GetNumberOfTargets(0)
pos = I:GetConstructPosition()

  if enemies ==0 then
    if switch == 0 then
      globalPosSetpoint = pos
      globalPosSetpoint.y = AltSetpoint
      switch = 1
    end
  else
    globalPosSetpoint = I:GetTargetInfo(0, 0).Position
    switch = 0
  end


pErr = globalPosSetpoint-pos -- position error as a vector
pErrN = Vector3.Normalize(pErr) -- normalised position error vector
pErrS = Vector3.Magnitude(pErr)/10 -- the range or scaling factor of the error

  if pos.y < minAlt then
    pErrN.y = 1
  end

velocity = I:GetVelocityVector() -- construct velocity
velocityN = I:GetVelocityVectorNormalized() -- normalised construct velocity
osciErr = I:GetVelocityMagnitude()  -- side to side oscillation error

    der = osciErr - D -- derivative value
    int = In 
    D  = osciErr            -- saving the old value for the next loop
    In = pErrS+In         -- updating the cumilative error

    PID      = Kp*pErrS+Ki*int
    PIDosci  = Kd*der
    totalPID = PIDosci+PID

    if PID>1 then
      PID = 1
    elseif PID<0 then
      PID = 0
    end

    if PIDosci>1 then
      PIDosci = 1
    elseif PIDosci<0 then
      PIDosci = 0
    end
    
    InRange = 4000 -- this is used to regulate how large the integral can be so that it does not oversaturate the PID output
    if In>InRange then
      In = InRange
    elseif In<-InRange then
      In = -InRange
    end

  for i = 0,c-1 do

    dF = Vector3.Dot(gFA[i],{pErrN.x*PID,pErrN.y*PID,pErrN.z*PID})
    if enemies>0 then
      
      if dF>largestDf then
        largestDf = dF
      end
      
      scaleDf = 1/largestDf
      else
        scaleDf = 1
    end

    if enemies==0 then
      dFosci = Vector3.Dot(gFA[i],{-velocity.x*PIDosci,-velocity.y*PIDosci,-velocity.z*PIDosci})
    else
      dFosci = 0
    end

    if dF>=1 then
      dF = 1
    elseif dF<=0 then
      dF = 0
    end

    if dFosci>0.5 then
      dFosci = 0.5
    elseif dFosci<=0 then
      dFosci = 0
    end

    I:Component_SetFloatLogic(9,i,dF*scaleDf+dFosci)
  end
    largestDf = 0
end

function Update(I)
c = I:Component_GetCount(9)
  if c~= oldThrusterCount then
    oldThrusterCount =c
    ArrayI(I,c)
  else
    SortT(I,c)
    Drive(I,c)
  end
I:RequestComplexControllerStimulus(1)
end
